from __future__ import division

import sys
import numpy
import argparse
parser = argparse.ArgumentParser(description='compare_hidden.py')
import torch


parser.add_argument('-s1', default="",
                    help="""Path to vector for s1""")
parser.add_argument('-s2', default="",
                    help="""Path to vector for s2""")
parser.add_argument('-ref', default="",
                    help="""Path to vector for ref""")

parser.add_argument('-label', default="",
                    help="""Path to label""")


def main():
    opt = parser.parse_args()


    #prepare data
    s1 = numpy.load(opt.s1);
    s2 = numpy.load(opt.s2);
    ref = numpy.load(opt.ref);

    inp = numpy.concatenate((s1,s2,ref), axis=0)
    
    print inp.shape
    
    label = []
    with open(opt.label, "r") as f:
        l = f.readline()
        while(l):
            label.append(int(l.strip()));
            l = f.readline();
    
    label = np.asarray(label)
    print "Label:",label.shape
                        

    


    model = torch.nn.Sequential(
          torch.nn.Linear(1500, 3),
        )

    learning_rate = 1e-4
    optimizer = torch.optim.Adam(model.parameters(), lr=learning_rate)


    

if __name__ == "__main__":
    main()

